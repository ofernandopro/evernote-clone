[{"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/index.js":"1","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/App.js":"2","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/header/index.js":"3","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/home/index.js":"4","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/routes.js":"5","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/auth/register/index.js":"6","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/auth/login/index.js":"7","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/users/edit/index.js":"8","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/notes/index/index.js":"9","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/register_form/index.js":"10","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/services/users.js":"11","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/services/api.js":"12","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/login_form/index.js":"13","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/private_router/index.js":"14","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/header_logged/index.js":"15","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/notes/index.js":"16","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/services/notes.js":"17","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/notes/list/index.js":"18","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/notes/editor/index.js":"19","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/serviceWorker.js":"20","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/users/user_edit_form/index.js":"21","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/users/user_edit_password_form/index.js":"22","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/users/user_delete/index.js":"23","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/notes/search/index.js":"24"},{"size":452,"mtime":1573806553000,"results":"25","hashOfConfig":"26"},{"size":223,"mtime":1573806553000,"results":"27","hashOfConfig":"26"},{"size":1318,"mtime":1573806553000,"results":"28","hashOfConfig":"26"},{"size":1307,"mtime":1573806553000,"results":"29","hashOfConfig":"26"},{"size":841,"mtime":1573806553000,"results":"30","hashOfConfig":"26"},{"size":1299,"mtime":1573806553000,"results":"31","hashOfConfig":"26"},{"size":1284,"mtime":1573806553000,"results":"32","hashOfConfig":"26"},{"size":1568,"mtime":1573806553000,"results":"33","hashOfConfig":"26"},{"size":409,"mtime":1573806553000,"results":"34","hashOfConfig":"26"},{"size":2770,"mtime":1573806553000,"results":"35","hashOfConfig":"26"},{"size":1081,"mtime":1573806553000,"results":"36","hashOfConfig":"26"},{"size":108,"mtime":1573806553000,"results":"37","hashOfConfig":"26"},{"size":2509,"mtime":1573806553000,"results":"38","hashOfConfig":"26"},{"size":329,"mtime":1573806553000,"results":"39","hashOfConfig":"26"},{"size":2783,"mtime":1573806553000,"results":"40","hashOfConfig":"26"},{"size":2571,"mtime":1573806553000,"results":"41","hashOfConfig":"26"},{"size":720,"mtime":1573806553000,"results":"42","hashOfConfig":"26"},{"size":2693,"mtime":1608406739923,"results":"43","hashOfConfig":"26"},{"size":1234,"mtime":1608407598000,"results":"44","hashOfConfig":"26"},{"size":4951,"mtime":1573806553000,"results":"45","hashOfConfig":"26"},{"size":2064,"mtime":1573806553000,"results":"46","hashOfConfig":"26"},{"size":2225,"mtime":1573806553000,"results":"47","hashOfConfig":"26"},{"size":643,"mtime":1573806553000,"results":"48","hashOfConfig":"26"},{"size":1064,"mtime":1608427771536,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1xe89f4",{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/index.js",[],["112","113"],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/App.js",["114","115"],"import React, { Fragment } from 'react';\nimport { Notification, Section } from 'rbx';\nimport './App.scss';\nimport Routes from './routes';\n\nconst App = () => (\n    <Fragment>\n        <Routes />\n    </Fragment>\n)\n\nexport default App;\n\n","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/header/index.js",["116"],"import React from 'react';\nimport { Navbar, Container, Column } from 'rbx';\nimport logoImage from '../../assets/images/logo.png';\nimport '../../styles/header.scss';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <Navbar>\n            <Container>\n                <Navbar.Brand>\n                    <Link to=\"/\">\n                        <img src={logoImage} />\n                    </Link>\n                    <Navbar.Burger\n                        className=\"navbar-burger burger\"\n                        aria-label=\"menu\"\n                        aria-expanded=\"false\"\n                        data-target=\"navbar-menu\">\n                        <span aria-hidden=\"true\"></span>\n                        <span aria-hidden=\"true\"></span>\n                        <span aria-hidden=\"true\"></span>\n                    </Navbar.Burger>\n                </Navbar.Brand>\n\n                <Navbar.Menu id=\"navbar-menu\">\n                    <Navbar.Segment as=\"div\" className=\"navbar-item navbar-end\" align=\"right\">\n                        <Column.Group>\n                            <Column>\n                                <Link to=\"/register\" className=\"button is-white has-text-custom-purple\">Register</Link>\n                            </Column>\n                            <Column>\n                                <Link to=\"/login\" className=\"button is-outlined is-custom-purple\">Login</Link>\n                            </Column>\n                        </Column.Group>\n                    </Navbar.Segment>\n                </Navbar.Menu>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default Header;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/home/index.js",["117"],"import React, { Fragment } from 'react';\nimport PresentationImage from '../../assets/images/presentation.png';\nimport Header from '../../components/header';\nimport { Column, Section, Title, Container } from 'rbx';\nimport { Link } from 'react-router-dom';\nimport '../../styles/home.scss';\n\nconst HomeScreen = () => (\n    <Fragment>\n        <Header />\n\n        <Section size=\"medium\" className=\"home\">\n            <Container>\n                <Column.Group>\n                    <Column size={5}>\n                        <Title size={2} spaced className=\"has-text-white\">\n                            Create notes easily and access whenever you want on the cloud\n                        </Title>\n                        <Title size={5} spaced className=\"has-text-light\" subtitle>\n                            Lorem ipsum, or lipsum as it is sometimes known, is dummy text used in laying out print, graphic or web designs.<br /><br />\n                        </Title>\n                        <Link to=\"/register\" className=\"button is-outlined is-white is-large\">\n                            <strong>Register now for free</strong>\n                        </Link>\n                    </Column>\n\n                    <Column size={6} offset={1}>\n                        <img src={PresentationImage} />\n                    </Column>\n                </Column.Group>\n            </Container>\n        </Section>\n    </Fragment>\n)\n\nexport default HomeScreen;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/routes.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/auth/register/index.js",["118"],"import React, { Fragment } from 'react';\nimport Header from '../../../components/header';\nimport { Column, Section, Title, Container, Card } from 'rbx';\nimport logoImage from '../../../assets/images/logo.png';\nimport '../../../styles/auth.scss';\nimport RegisterForm from '../../../components/auth/register_form';\n\nconst RegisterScreen = () => (\n    <Fragment>\n        <Header />\n        <Section size=\"medium\" className=\"auth\">\n            <Container>\n                <Column.Group centered>\n                    <Column size={4}>\n                        <Card>\n                            <Card.Content>\n                                <Section>\n                                    <Column.Group centered>\n                                        <Column size={12}>\n                                            <img src={logoImage} />\n                                        </Column>\n                                    </Column.Group>\n\n                                    <Column.Group>\n                                        <Column size={12}>\n                                            <Title size={6} className=\"has-text-grey has-text-centered\">\n                                                Your notes on the cloud\n                                            </Title>\n                                        </Column>\n                                    </Column.Group>\n                                    <RegisterForm />\n                                </Section>\n                            </Card.Content>\n                        </Card>\n                    </Column>\n                </Column.Group>\n            </Container>\n        </Section>\n    </Fragment>\n);\n\nexport default RegisterScreen;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/auth/login/index.js",["119"],"import React, { Fragment } from 'react';\nimport Header from '../../../components/header';\nimport { Column, Section, Title, Container, Card } from 'rbx';\nimport logoImage from '../../../assets/images/logo.png';\nimport '../../../styles/auth.scss';\nimport LoginForm from '../../../components/auth/login_form';\n\nconst LoginScreen = () => (\n    <Fragment>\n        <Header />\n        <Section size=\"medium\" className=\"auth\">\n            <Container>\n                <Column.Group centered>\n                    <Column size={3}>\n                        <Card>\n                            <Card.Content>\n                                <Section>\n                                    <Column.Group centered>\n                                        <Column size={12}>\n                                            <img src={logoImage} />\n                                        </Column>\n                                    </Column.Group>\n\n                                    <Column.Group>\n                                        <Column size={12}>\n                                            <Title size={6} className=\"has-text-grey has-text-centered\">\n                                                Your notes on the cloud\n                                            </Title>\n                                        </Column>\n                                    </Column.Group>\n                                    <LoginForm />\n                                </Section>\n                            </Card.Content>\n                        </Card>\n                    </Column>\n                </Column.Group>\n            </Container>\n        </Section>\n    </Fragment>\n);\n\nexport default LoginScreen;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/users/edit/index.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/notes/index/index.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/register_form/index.js",["120","121","122"],"import React, { Fragment, useState } from 'react';\nimport { Button, Field, Control, Input, Column, Section, Help, Label } from \"rbx\";\nimport { Redirect } from \"react-router-dom\";\nimport UsersService from '../../../services/users';\n\nfunction RegisterForm() {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [redirectToLogin, setRedirectToLogin] = useState(false);\n    const [error, setError] = useState(false);\n\n    const HandleSubmit = async (evt) => {\n        evt.preventDefault();\n        try {\n            const user = await UsersService.register({ name: name, email: email, password: password });\n            setRedirectToLogin(true);\n        } catch (error) {\n            setError(true);\n        }\n    }\n\n    if (redirectToLogin)\n        return <Redirect to={{ pathname: \"/login\" }} />\n\n    return (\n        <Fragment>\n            <Column.Group centered>\n                <form onSubmit={HandleSubmit}>\n                    <Column size={12}>\n                        <Field>\n                            <Label size=\"small\">Name:</Label>\n                            <Control>\n                                <Input\n                                    type=\"name\"\n                                    required\n                                    name=\"name\"\n                                    value={name}\n                                    onChange={e => setName(e.target.value)}\n                                />\n                            </Control>\n                        </Field>\n                        <Field>\n                            <Label size=\"small\">Email:</Label>\n                            <Control>\n                                <Input\n                                    type=\"email\"\n                                    required\n                                    name=\"email\"\n                                    value={email}\n                                    onChange={e => setEmail(e.target.value)}\n                                />\n                            </Control>\n                        </Field>\n                        <Field>\n                            <Label size=\"small\">Password:</Label>\n                            <Control>\n                                <Input\n                                    type=\"password\"\n                                    required\n                                    name=\"password\"\n                                    value={password}\n                                    onChange={e => setPassword(e.target.value)}\n                                />\n                            </Control>\n                        </Field>\n                        <Field>\n                            <Control>\n                                <Column.Group breakpoint=\"mobile\">\n                                    <Column>\n                                        <a className=\"button is-white has-text-custom-purple\"\n                                            onClick={e => setRedirectToLogin(true)}\n                                        >Login or</a>\n                                    </Column>\n                                    <Column>\n                                        <Button color=\"custom-purple\" outlined>Register</Button>\n                                    </Column>\n                                </Column.Group>\n                            </Control>\n                        </Field>\n                        {error && <Help color=\"danger\">Email or Password invalid</Help>}\n                    </Column>\n                </form>\n            </Column.Group>\n        </Fragment>\n    )\n}\n\nexport default RegisterForm;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/services/users.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/services/api.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/login_form/index.js",["123","124","125"],"import React, { Fragment, useState } from 'react';\nimport { Button, Field, Control, Input, Column, Section, Help, Label } from \"rbx\";\nimport { Redirect } from \"react-router-dom\";\nimport UsersService from '../../../services/users';\n\nfunction LoginForm() {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [redirectToRegister, setRedirectToRegister] = useState(false);\n    const [redirectToNotes, setRedirectToNotes] = useState(false);\n    const [error, setError] = useState(false);\n\n    const HandleSubmit = async (evt) => {\n        evt.preventDefault();\n        try {\n            const user = await UsersService.login({ email: email, password: password });\n            setRedirectToNotes(true);\n        } catch (error) {\n            setError(true);\n        }\n    }\n\n    if (redirectToRegister)\n        return <Redirect to={{ pathname: \"/register\" }} />\n    else if (redirectToNotes)\n        return <Redirect to={{ pathname: \"/notes\" }} />\n\n    return (\n        <Fragment>\n            <Column.Group centered>\n                <form onSubmit={HandleSubmit}>\n                    <Column size={12}>\n                        <Field>\n                            <Label size=\"small\">Email:</Label>\n                            <Control>\n                                <Input\n                                    type=\"email\"\n                                    required\n                                    name=\"email\"\n                                    value={email}\n                                    onChange={e => setEmail(e.target.value)}\n                                />\n                            </Control>\n                        </Field>\n                        <Field>\n                            <Label size=\"small\">Password:</Label>\n                            <Control>\n                                <Input\n                                    type=\"password\"\n                                    required\n                                    name=\"password\"\n                                    value={password}\n                                    onChange={e => setPassword(e.target.value)}\n                                />\n                            </Control>\n                        </Field>\n                        <Field>\n                            <Control>\n                                <Column.Group breakpoint=\"mobile\">\n                                    <Column>\n                                        <a className=\"button is-white has-text-custom-purple\"\n                                            onClick={e => setRedirectToRegister(true)}\n                                        >Register or</a>\n                                    </Column>\n                                    <Column>\n                                        <Button color=\"custom-purple\" outlined>Login</Button>\n                                    </Column>\n                                </Column.Group>\n                            </Control>\n                        </Field>\n                        {error && <Help color=\"danger\">Email or Password invalid</Help>}\n                    </Column>\n                </form>\n            </Column.Group>\n        </Fragment>\n    )\n}\n\nexport default LoginForm;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/private_router/index.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/header_logged/index.js",["126","127","128","129"],"import React, { useState } from 'react';\nimport { Navbar, Container, Column, Button, Dropdown } from 'rbx';\nimport logoImage from '../../assets/images/logo-white.png';\nimport \"../../styles/header.scss\";\nimport UsersService from '../../services/users';\nimport { Redirect, Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faList } from '@fortawesome/free-solid-svg-icons'\n\nfunction HeaderLogged(props) {\n    const [redirectToHome, setRedirectToHome] = useState(false);\n\n    const logOut = async () => {\n        await UsersService.logout();\n        setRedirectToHome(true);\n    }\n\n    if (redirectToHome == true)\n        return <Redirect to={{ pathname: \"/\" }} />\n\n    return (\n        <Navbar color=\"custom-purple\" className=\"navbar-logged\">\n            <Navbar.Brand>\n                <Column.Group>\n                    <Column size=\"11\" offset=\"1\">\n                        <Link to=\"/notes\">\n                            <img src={logoImage} />\n                        </Link>\n                    </Column>\n                </Column.Group>\n            </Navbar.Brand>\n\n            <Navbar.Menu>\n                <Navbar.Segment as=\"div\" className=\"navbar-item navbar-start\" align=\"start\">\n                    <Navbar.Item as=\"div\">\n                        <Button\n                            className=\"open-button\"\n                            color=\"white\"\n                            outlined\n                            onClick={() => props.setIsOpen(true)}>\n                            <FontAwesomeIcon icon={faList} />\n                        </Button>\n                    </Navbar.Item>\n                </Navbar.Segment>\n                <Navbar.Segment as=\"div\" className=\"navbar-item navbar-end\" align=\"right\">\n                    <Navbar.Item as=\"div\">\n                        <Dropdown>\n                            <Dropdown.Trigger>\n                                <Button className=\"button\" color=\"white\" outlined>\n                                    <span>Fernando ▼</span>\n                                </Button>\n                            </Dropdown.Trigger>\n                            <Dropdown.Menu>\n                                <Dropdown.Content>\n                                    <Dropdown.Item as=\"div\">\n                                        <Link to=\"/users/edit\">User Edit</Link>\n                                    </Dropdown.Item>\n                                    <Dropdown.Divider />\n                                    <Dropdown.Item as=\"div\">\n                                        <a href=\"#\" onClick={e => logOut()}>LogOut</a>\n                                    </Dropdown.Item>\n                                </Dropdown.Content>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Navbar.Item>\n                </Navbar.Segment>\n            </Navbar.Menu>\n        </Navbar>\n    )\n}\n\nexport default HeaderLogged;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/notes/index.js",["130","131"],"import React, { Fragment, useEffect, useState } from 'react';\nimport { Column, Button } from \"rbx\";\nimport \"../../styles/notes.scss\";\nimport { push as Menu } from 'react-burger-menu'\nimport List from \"../notes/list\";\nimport Editor from \"../notes/editor\";\nimport Search from \"../notes/search\";\nimport NotesService from '../../services/notes';\n\nfunction Notes(props) {\n  const [notes, setNotes] = useState([]);\n  const [current_note, setCurrentNote] = useState({ title: \"\", body: \"\", id: \"\" });\n\n  async function fetchNotes() {\n    const response = await NotesService.index();\n    if (response.data.length >= 1) {\n      setNotes(response.data.reverse())\n      setCurrentNote(response.data[0])\n    } else {\n      setNotes([]);\n    }\n  }\n\n  const createNote = async () => {\n    await NotesService.create();\n    fetchNotes();\n  }\n\n  const deleteNote = async (note) => {\n    await NotesService.delete(note._id);\n    fetchNotes();\n  }\n\n  const updateNote = async (oldNote, params) => {\n    const updatedNote = await NotesService.update(oldNote._id, params);\n    const index = notes.indexOf(oldNote);\n    const newNotes = notes;\n    newNotes[index] = updatedNote.data;\n    setNotes(newNotes);\n    setCurrentNote(updatedNote.data);\n  }\n\n  const searchNotes = async (query) => {\n    const response = await NotesService.search(query);\n    setNotes(response.data);\n  }\n\n  const selectNote = (id) => {\n    const note = notes.find((note) => {\n      return note._id == id;\n    })\n    setCurrentNote(note);\n  }\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  return (\n    <Fragment>\n      <Column.Group className=\"notes\" id=\"notes\">\n        <Menu\n          pageWrapId={\"notes-editor\"}\n          isOpen={props.isOpen}\n          onStateChange={(state) => props.setIsOpen(state.isOpen)}\n          disableAutoFocus\n          outerContainerId={\"notes\"}\n          customBurgerIcon={false}\n          customCrossIcon={false}\n        >\n          <Column.Group>\n            <Column size={10} offset={1}>\n              <Search searchNotes={searchNotes} fetchNotes={fetchNotes}/>\n            </Column>\n          </Column.Group>\n          <List\n            notes={notes}\n            selectNote={selectNote}\n            current_note={current_note} \n            deleteNote={deleteNote}\n            createNote={createNote}/>\n        </Menu>\n\n\n        <Column size={12} className=\"notes-editor\" id=\"notes-editor\">\n          <Editor \n            note={current_note}\n            updateNote={updateNote}  \n          />\n        </Column>\n      </Column.Group>\n    </Fragment>\n  )\n}\n\nexport default Notes;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/services/notes.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/notes/list/index.js",["132"],"import React, { Fragment } from 'react';\nimport { Button, Column, Tag, Title, List } from \"rbx\";\nimport Moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport \"../../../styles/list.scss\";\n\nfunction ListNotes(props) {\n    return (\n        <Fragment>\n            <Column.Group breakpoint=\"mobile\">\n                <Column size={6} offset={1}>\n                    <Title size={6}>\n                        {props.notes.length} Notes\n                    </Title>\n                </Column>\n                <Column size={2}>\n                    <Button state=\"active\" color=\"custom-purple\" outlined size=\"small\" onClick={() => props.createNote()}>\n                        Notes +\n                    </Button>\n                </Column>\n            </Column.Group>\n            <List className=\"notes-list\">\n                {props.notes.map((item, key) =>\n                    <Fragment>\n                        <div className=\"notes-list-single\">\n                            <List.Item key={key} onClick={() => props.selectNote(item._id)} active={item == props.current_note}>\n                                <Title size={6}>\n                                    {item.title.replace(/(<([^>]+)>)/ig, \"\").substring(0, 30)}\n                                </Title>\n                                <Title size={6} subtitle spaced={false}>\n                                    {item.body.replace(/(<([^>]+)>)/ig, \"\").substring(0, 30)}\n                                </Title>\n\n                                <Column.Group breakpoint=\"mobile\">\n                                    <Column size={10} className=\"date-tag\">\n                                        <Tag color=\"black\">\n                                            {Moment(item.updated_at).format('DD/MM/YY')}\n                                        </Tag>\n                                    </Column>\n                                    <Column size={2}>\n                                        <FontAwesomeIcon className=\"remove-icon\"\n                                            icon={faTrash}\n                                            onClick={() => props.deleteNote(item)}\n                                            color=\"grey\"\n                                        />\n                                    </Column>\n                                </Column.Group>\n                            </List.Item>\n\n                        </div>\n                        <hr />\n                    </Fragment>\n                )}\n            </List>\n            <div className=\"white-space\"></div>\n        </Fragment>\n    )\n}\n\nexport default ListNotes;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/notes/editor/index.js",["133"],"import React, { Fragment, useState, useEffect } from 'react';\n\nimport ReactQuill from 'react-quill'; // ES6\nimport 'react-quill/dist/quill.snow.css'; // ES6\n\nfunction Editor(props) {\n  const [currentContent, setCurrentContent] = useState('');\n  const [timer, setTimer] = useState(null);\n\n  const updateNote = (content) => {\n    const title = content.replace(/(<([^>]+)>)/ig, \"\").slice(0, 30);\n    props.updateNote(props.note, { 'title': title, 'body': content });\n  }\n\n  const handleChange = (content, delta, source) => {\n    clearTimeout(timer);\n    if (source == 'user') {\n      setCurrentContent(content);\n      setTimer(setTimeout(() => updateNote(content), 2000))\n    }\n  }\n\n\n  useEffect(() => {\n    setCurrentContent(props.note.body)\n  }, [props.note])\n\n  const modules = {\n    toolbar: [\n      [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n      ['bold', 'italic', 'underline', 'strike', 'blockquote', 'code-block'],\n      [{ 'list': 'ordered' }, { 'list': 'bullet' },\n      { 'indent': '-1' }, { 'indent': '+1' }],\n      ['link'],\n      ['clean'],\n    ]\n  }\n\n  return (\n    <Fragment>\n      <ReactQuill value={currentContent} modules={modules} onChange={handleChange} />\n    </Fragment>\n  )\n}\n\nexport default Editor;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/serviceWorker.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/users/user_edit_form/index.js",["134","135","136"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { Button, Field, Control, Input, Column, Title, Help, Label } from \"rbx\";\nimport UsersService from '../../../services/users';\n\nfunction UsersEditForm() {\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [status, setStatus] = useState(null);\n\n  const initializeUser = async () => {\n    const user = await JSON.parse(localStorage.getItem('user'));\n    setName(user['name']);\n    setEmail(user['email']);\n  }\n\n  useEffect(() =>{\n    initializeUser()    \n  }, [])\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n\n    try {\n      await UsersService.update({ email: email, name: name });\n      setStatus(\"success\")\n    } catch (err) {\n      setStatus(\"error\")\n    }\n  }\n\n  return (\n    <Fragment>\n      <form onSubmit={handleSubmit}>\n        <Field>\n          <Control>\n            <Label className=\"has-text-grey\">Full Name</Label>\n            <Input\n              type=\"name\"\n              value={name || \"\"}\n              onChange={e => setName(e.target.value)}\n              required\n              name=\"name\"\n            />\n          </Control>\n        </Field>\n        <Field>\n          <Control>\n            <Label className=\"has-text-grey\">Email</Label>\n            <Input\n              type=\"email\"\n              value={email || \"\"}\n              onChange={e => setEmail(e.target.value)}\n              required\n              name=\"email\"\n            />\n          </Control>\n        </Field>\n\n        <Field>\n          <Control>\n            <Column.Group>\n              <Column className=\"has-text-right\">\n                <Button color=\"custom-purple\" outlined>Update</Button>\n              </Column>\n            </Column.Group>\n          </Control>\n        </Field>\n        {status == \"error\" &&\n          <Help color=\"danger\">Problem in update</Help>\n        }\n        {status == \"success\" &&\n          <Help color=\"primary\">Updated with success</Help>\n        }\n      </form>\n    </Fragment>\n  )\n\n\n}\n\nexport default UsersEditForm;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/users/user_edit_password_form/index.js",["137","138","139","140","141"],"import React, { Fragment, useState } from 'react';\nimport { Button, Field, Control, Input, Column, Title, Help, Label } from \"rbx\";\nimport UsersService from '../../../services/users';\n\nfunction UsersEditFormPassword() {\n  const [password, setPassword] = useState(\"\");\n  const [password_confirmation, setPasswordConfirmation] = useState(\"\");\n  const [status, setStatus] = useState(null);\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n\n    if(password == password_confirmation){\n      try {\n        await UsersService.updatePassword({ password: password });\n        setStatus(\"success\")\n      } catch (err) {\n        setStatus(\"error\")\n      }\n    } else{\n      setStatus(\"error_confirmation_password\")\n    }\n\n  }\n\n  return (\n    <Fragment>\n      <form onSubmit={handleSubmit}>\n        <Field>\n          <Control>\n            <Label className=\"has-text-grey\">Password</Label>\n            <Input\n              type=\"password\"\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n              required\n              name=\"password\"\n            />\n          </Control>\n        </Field>\n        <Field>\n          <Control>\n            <Label className=\"has-text-grey\">Password Confirmation</Label>\n            <Input\n              type=\"password\"\n              value={password_confirmation}\n              onChange={e => setPasswordConfirmation(e.target.value)}\n              required\n              name=\"password_confirmation\"\n            />\n          </Control>\n        </Field>\n\n        <Field>\n          <Control>\n            <Column.Group>\n              <Column className=\"has-text-right\">\n                <Button color=\"custom-purple\" outlined>Update Password</Button>\n              </Column>\n            </Column.Group>\n          </Control>\n        </Field>\n        {status == \"error_update\" &&\n          <Help color=\"danger\">Problem in password update</Help>\n        }\n        {status == \"error_confirmation_password\" &&\n          <Help color=\"danger\">Password don't match</Help>\n        }\n        {status == \"success\" &&\n          <Help color=\"primary\">Updated with success</Help>\n        }\n      </form>\n    </Fragment>\n  )\n}\n\nexport default UsersEditFormPassword;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/users/user_delete/index.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/notes/search/index.js",["142","143"],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":22},{"ruleId":"148","severity":1,"message":"152","line":2,"column":24,"nodeType":"150","messageId":"151","endLine":2,"endColumn":31},{"ruleId":"153","severity":1,"message":"154","line":13,"column":25,"nodeType":"155","endLine":13,"endColumn":48},{"ruleId":"153","severity":1,"message":"154","line":28,"column":25,"nodeType":"155","endLine":28,"endColumn":56},{"ruleId":"153","severity":1,"message":"154","line":20,"column":45,"nodeType":"155","endLine":20,"endColumn":68},{"ruleId":"153","severity":1,"message":"154","line":20,"column":45,"nodeType":"155","endLine":20,"endColumn":68},{"ruleId":"148","severity":1,"message":"152","line":2,"column":49,"nodeType":"150","messageId":"151","endLine":2,"endColumn":56},{"ruleId":"148","severity":1,"message":"156","line":16,"column":19,"nodeType":"150","messageId":"151","endLine":16,"endColumn":23},{"ruleId":"157","severity":1,"message":"158","line":71,"column":41,"nodeType":"155","endLine":73,"endColumn":42},{"ruleId":"148","severity":1,"message":"152","line":2,"column":49,"nodeType":"150","messageId":"151","endLine":2,"endColumn":56},{"ruleId":"148","severity":1,"message":"156","line":16,"column":19,"nodeType":"150","messageId":"151","endLine":16,"endColumn":23},{"ruleId":"157","severity":1,"message":"158","line":61,"column":41,"nodeType":"155","endLine":63,"endColumn":42},{"ruleId":"148","severity":1,"message":"159","line":2,"column":18,"nodeType":"150","messageId":"151","endLine":2,"endColumn":27},{"ruleId":"160","severity":1,"message":"161","line":18,"column":24,"nodeType":"162","messageId":"163","endLine":18,"endColumn":26},{"ruleId":"153","severity":1,"message":"154","line":27,"column":29,"nodeType":"155","endLine":27,"endColumn":52},{"ruleId":"157","severity":1,"message":"164","line":60,"column":41,"nodeType":"155","endLine":60,"endColumn":77},{"ruleId":"148","severity":1,"message":"165","line":2,"column":18,"nodeType":"150","messageId":"151","endLine":2,"endColumn":24},{"ruleId":"160","severity":1,"message":"161","line":50,"column":29,"nodeType":"162","messageId":"163","endLine":50,"endColumn":31},{"ruleId":"160","severity":1,"message":"161","line":27,"column":106,"nodeType":"162","messageId":"163","endLine":27,"endColumn":108},{"ruleId":"160","severity":1,"message":"161","line":17,"column":16,"nodeType":"162","messageId":"163","endLine":17,"endColumn":18},{"ruleId":"148","severity":1,"message":"166","line":2,"column":49,"nodeType":"150","messageId":"151","endLine":2,"endColumn":54},{"ruleId":"160","severity":1,"message":"161","line":68,"column":17,"nodeType":"162","messageId":"163","endLine":68,"endColumn":19},{"ruleId":"160","severity":1,"message":"161","line":71,"column":17,"nodeType":"162","messageId":"163","endLine":71,"endColumn":19},{"ruleId":"148","severity":1,"message":"166","line":2,"column":49,"nodeType":"150","messageId":"151","endLine":2,"endColumn":54},{"ruleId":"160","severity":1,"message":"161","line":13,"column":17,"nodeType":"162","messageId":"163","endLine":13,"endColumn":19},{"ruleId":"160","severity":1,"message":"161","line":63,"column":17,"nodeType":"162","messageId":"163","endLine":63,"endColumn":19},{"ruleId":"160","severity":1,"message":"161","line":66,"column":17,"nodeType":"162","messageId":"163","endLine":66,"endColumn":19},{"ruleId":"160","severity":1,"message":"161","line":69,"column":17,"nodeType":"162","messageId":"163","endLine":69,"endColumn":19},{"ruleId":"148","severity":1,"message":"167","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"157","severity":1,"message":"164","line":26,"column":9,"nodeType":"155","endLine":29,"endColumn":12},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'Notification' is defined but never used.","Identifier","unusedVar","'Section' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'user' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Container' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Button' is defined but never used.","'Title' is defined but never used.","'Fragment' is defined but never used.","no-global-assign","no-unsafe-negation"]