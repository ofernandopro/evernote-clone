[{"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/index.js":"1","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/App.js":"2","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/reportWebVitals.js":"3","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/header/index.js":"4","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/home/index.js":"5","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/routes.js":"6","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/auth/register/index.js":"7","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/auth/login/index.js":"8","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/users/edit/index.js":"9","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/notes/index/index.js":"10","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/register_form/index.js":"11","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/services/users.js":"12","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/services/api.js":"13","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/login_form/index.js":"14","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/private_router/index.js":"15","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/header_logged/index.js":"16"},{"size":500,"mtime":1607118892619,"results":"17","hashOfConfig":"18"},{"size":233,"mtime":1607299970998,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1607118892620,"results":"20","hashOfConfig":"18"},{"size":1639,"mtime":1607367250584,"results":"21","hashOfConfig":"18"},{"size":1442,"mtime":1607367505409,"results":"22","hashOfConfig":"18"},{"size":887,"mtime":1607538292825,"results":"23","hashOfConfig":"18"},{"size":1706,"mtime":1607377779565,"results":"24","hashOfConfig":"18"},{"size":1691,"mtime":1607451083704,"results":"25","hashOfConfig":"18"},{"size":160,"mtime":1607366702401,"results":"26","hashOfConfig":"18"},{"size":239,"mtime":1607539461477,"results":"27","hashOfConfig":"18"},{"size":3697,"mtime":1607446724767,"results":"28","hashOfConfig":"18"},{"size":500,"mtime":1607539085133,"results":"29","hashOfConfig":"18"},{"size":110,"mtime":1607440755748,"results":"30","hashOfConfig":"18"},{"size":3258,"mtime":1607537093004,"results":"31","hashOfConfig":"18"},{"size":354,"mtime":1607538142335,"results":"32","hashOfConfig":"18"},{"size":2431,"mtime":1607539688365,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"em7g4",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/index.js",[],["74","75"],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/App.js",["76","77"],"import React, { Fragment } from 'react';\nimport { Notification, Section } from 'rbx';\nimport './App.scss';\nimport Routes from './routes';\n\nconst App = () => (\n    <Fragment>\n        <Routes />\n    </Fragment>\n)\n\nexport default App;\n\n","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/reportWebVitals.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/header/index.js",["78"],"import React from 'react';\nimport { Navbar, Container, Column } from 'rbx';\nimport logoImage from '../../assets/images/logo.png';\nimport '../../styles/header.scss';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <Navbar>\n            <Container>\n                <Navbar.Brand>\n                    <Link to=\"/\">\n                        <img src={logoImage} />\n                    </Link>\n                    <Navbar.Burger\n                        className=\"navbar-burger burger\"\n                        aria-label=\"menu\"\n                        aria-expanded=\"false\"\n                        data-target=\"navbar-menu\">\n                        <span aria-hidden=\"true\"></span>\n                        <span aria-hidden=\"true\"></span>\n                        <span aria-hidden=\"true\"></span>\n                    </Navbar.Burger>\n                </Navbar.Brand>\n\n                <Navbar.Menu id=\"navbar-menu\">\n                    <Navbar.Segment as=\"div\" className=\"navbar-item navbar-end\" align=\"right\">\n                        <Column.Group>\n                            <Column>\n                                <Link to=\"/register\" className=\"button is-white has-text-custom-purple\">Register</Link>\n                            </Column>\n                            <Column>\n                                <Link to=\"/login\" className=\"button is-outlined is-custom-purple\">Login</Link>\n                            </Column>\n                        </Column.Group>\n                    </Navbar.Segment>\n                </Navbar.Menu>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default Header;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/home/index.js",["79"],"import React, { Fragment } from 'react';\nimport PresentationImage from '../../assets/images/presentation.png';\nimport Header from '../../components/header';\nimport { Column, Section, Title, Container } from 'rbx';\nimport { Link } from 'react-router-dom';\nimport '../../styles/home.scss';\n\nconst HomeScreen = () => (\n    <Fragment>\n        <Header />\n\n        <Section size=\"medium\" className=\"home\">\n            <Container>\n                <Column.Group>\n                    <Column size={5}>\n                        <Title size={2} spaced className=\"has-text-white\">\n                            Create notes easily and access whenever you want on the cloud\n                        </Title>\n                        <Title size={5} spaced className=\"has-text-light\" subtitle>\n                            Lorem ipsum, or lipsum as it is sometimes known, is dummy text used in laying out print, graphic or web designs.<br /><br />\n                        </Title>\n                        <Link to=\"/register\" className=\"button is-outlined is-white is-large\">\n                            <strong>Register now for free</strong>\n                        </Link>\n                    </Column>\n\n                    <Column size={6} offset={1}>\n                        <img src={PresentationImage} />\n                    </Column>\n                </Column.Group>\n            </Container>\n        </Section>\n    </Fragment>\n)\n\nexport default HomeScreen;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/routes.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/auth/register/index.js",["80"],"import React, { Fragment } from 'react';\nimport Header from '../../../components/header';\nimport { Column, Section, Title, Container, Card } from 'rbx';\nimport logoImage from '../../../assets/images/logo.png';\nimport '../../../styles/auth.scss';\nimport RegisterForm from '../../../components/auth/register_form';\n\nconst RegisterScreen = () => (\n    <Fragment>\n        <Header />\n        <Section size=\"medium\" className=\"auth\">\n            <Container>\n                <Column.Group centered>\n                    <Column size={4}>\n                        <Card>\n                            <Card.Content>\n                                <Section>\n                                    <Column.Group centered>\n                                        <Column size={12}>\n                                            <img src={logoImage} />\n                                        </Column>\n                                    </Column.Group>\n\n                                    <Column.Group>\n                                        <Column size={12}>\n                                            <Title size={6} className=\"has-text-grey has-text-centered\">\n                                                Your notes on the cloud\n                                            </Title>\n                                        </Column>\n                                    </Column.Group>\n                                    <RegisterForm />\n                                </Section>\n                            </Card.Content>\n                        </Card>\n                    </Column>\n                </Column.Group>\n            </Container>\n        </Section>\n    </Fragment>\n);\n\nexport default RegisterScreen;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/auth/login/index.js",["81"],"import React, { Fragment } from 'react';\nimport Header from '../../../components/header';\nimport { Column, Section, Title, Container, Card } from 'rbx';\nimport logoImage from '../../../assets/images/logo.png';\nimport '../../../styles/auth.scss';\nimport LoginForm from '../../../components/auth/login_form';\n\nconst LoginScreen = () => (\n    <Fragment>\n        <Header />\n        <Section size=\"medium\" className=\"auth\">\n            <Container>\n                <Column.Group centered>\n                    <Column size={3}>\n                        <Card>\n                            <Card.Content>\n                                <Section>\n                                    <Column.Group centered>\n                                        <Column size={12}>\n                                            <img src={logoImage} />\n                                        </Column>\n                                    </Column.Group>\n\n                                    <Column.Group>\n                                        <Column size={12}>\n                                            <Title size={6} className=\"has-text-grey has-text-centered\">\n                                                Your notes on the cloud\n                                            </Title>\n                                        </Column>\n                                    </Column.Group>\n                                    <LoginForm />\n                                </Section>\n                            </Card.Content>\n                        </Card>\n                    </Column>\n                </Column.Group>\n            </Container>\n        </Section>\n    </Fragment>\n);\n\nexport default LoginScreen;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/users/edit/index.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/screens/notes/index/index.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/register_form/index.js",["82","83","84"],"import React, { Fragment, useState } from 'react';\nimport { Button, Field, Control, Input, Column, Section, Help, Label } from \"rbx\";\nimport { Redirect } from \"react-router-dom\";\nimport UsersService from '../../../services/users';\n\nfunction RegisterForm() {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [redirectToLogin, setRedirectToLogin] = useState(false);\n    const [error, setError] = useState(false);\n\n    const HandleSubmit = async (evt) => {\n        evt.preventDefault();\n        try {\n            const user = await UsersService.register({ name: name, email: email, password: password });\n            setRedirectToLogin(true);\n        } catch (error) {\n            setError(true);\n        }\n    }\n\n    if (redirectToLogin)\n        return <Redirect to={{ pathname: \"/login\" }} />\n\n    return (\n        <Fragment>\n            <Column.Group centered>\n                <form onSubmit={HandleSubmit}>\n                    <Column size={12}>\n                        <Field>\n                            <Label size=\"small\">Name:</Label>\n                            <Control>\n                                <Input\n                                    type=\"name\"\n                                    required\n                                    name=\"name\"\n                                    value={name}\n                                    onChange={e => setName(e.target.value)}\n                                />\n                            </Control>\n                        </Field>\n                        <Field>\n                            <Label size=\"small\">Email:</Label>\n                            <Control>\n                                <Input\n                                    type=\"email\"\n                                    required\n                                    name=\"email\"\n                                    value={email}\n                                    onChange={e => setEmail(e.target.value)}\n                                />\n                            </Control>\n                        </Field>\n                        <Field>\n                            <Label size=\"small\">Password:</Label>\n                            <Control>\n                                <Input\n                                    type=\"password\"\n                                    required\n                                    name=\"password\"\n                                    value={password}\n                                    onChange={e => setPassword(e.target.value)}\n                                />\n                            </Control>\n                        </Field>\n                        <Field>\n                            <Control>\n                                <Column.Group breakpoint=\"mobile\">\n                                    <Column>\n                                        <a className=\"button is-white has-text-custom-purple\"\n                                            onClick={e => setRedirectToLogin(true)}\n                                        >Login or</a>\n                                    </Column>\n                                    <Column>\n                                        <Button color=\"custom-purple\" outlined>Register</Button>\n                                    </Column>\n                                </Column.Group>\n                            </Control>\n                        </Field>\n                        {error && <Help color=\"danger\">Email or Password invalid</Help>}\n                    </Column>\n                </form>\n            </Column.Group>\n        </Fragment>\n    )\n}\n\nexport default RegisterForm;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/services/users.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/services/api.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/login_form/index.js",["85","86","87"],"import React, { Fragment, useState } from 'react';\nimport { Button, Field, Control, Input, Column, Section, Help, Label } from \"rbx\";\nimport { Redirect } from \"react-router-dom\";\nimport UsersService from '../../../services/users';\n\nfunction LoginForm() {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [redirectToRegister, setRedirectToRegister] = useState(false);\n    const [redirectToNotes, setRedirectToNotes] = useState(false);\n    const [error, setError] = useState(false);\n\n    const HandleSubmit = async (evt) => {\n        evt.preventDefault();\n        try {\n            const user = await UsersService.login({ email: email, password: password });\n            setRedirectToNotes(true);\n        } catch (error) {\n            setError(true);\n        }\n    }\n\n    if (redirectToRegister)\n        return <Redirect to={{ pathname: \"/register\" }} />\n    else if (redirectToNotes)\n        return <Redirect to={{ pathname: \"/notes\" }} />\n\n    return (\n        <Fragment>\n            <Column.Group centered>\n                <form onSubmit={HandleSubmit}>\n                    <Column size={12}>\n                        <Field>\n                            <Label size=\"small\">Email:</Label>\n                            <Control>\n                                <Input\n                                    type=\"email\"\n                                    required\n                                    name=\"email\"\n                                    value={email}\n                                    onChange={e => setEmail(e.target.value)}\n                                />\n                            </Control>\n                        </Field>\n                        <Field>\n                            <Label size=\"small\">Password:</Label>\n                            <Control>\n                                <Input\n                                    type=\"password\"\n                                    required\n                                    name=\"password\"\n                                    value={password}\n                                    onChange={e => setPassword(e.target.value)}\n                                />\n                            </Control>\n                        </Field>\n                        <Field>\n                            <Control>\n                                <Column.Group breakpoint=\"mobile\">\n                                    <Column>\n                                        <a className=\"button is-white has-text-custom-purple\"\n                                            onClick={e => setRedirectToRegister(true)}\n                                        >Register or</a>\n                                    </Column>\n                                    <Column>\n                                        <Button color=\"custom-purple\" outlined>Login</Button>\n                                    </Column>\n                                </Column.Group>\n                            </Control>\n                        </Field>\n                        {error && <Help color=\"danger\">Email or Password invalid</Help>}\n                    </Column>\n                </form>\n            </Column.Group>\n        </Fragment>\n    )\n}\n\nexport default LoginForm;","/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/auth/private_router/index.js",[],"/Users/fernandomoreira/Desktop/CursoReactJS/evernote-clone/src/components/header_logged/index.js",["88","89","90","91","92","93"],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":22},{"ruleId":"98","severity":1,"message":"102","line":2,"column":24,"nodeType":"100","messageId":"101","endLine":2,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":13,"column":25,"nodeType":"105","endLine":13,"endColumn":48},{"ruleId":"103","severity":1,"message":"104","line":28,"column":25,"nodeType":"105","endLine":28,"endColumn":56},{"ruleId":"103","severity":1,"message":"104","line":20,"column":45,"nodeType":"105","endLine":20,"endColumn":68},{"ruleId":"103","severity":1,"message":"104","line":20,"column":45,"nodeType":"105","endLine":20,"endColumn":68},{"ruleId":"98","severity":1,"message":"102","line":2,"column":49,"nodeType":"100","messageId":"101","endLine":2,"endColumn":56},{"ruleId":"98","severity":1,"message":"106","line":16,"column":19,"nodeType":"100","messageId":"101","endLine":16,"endColumn":23},{"ruleId":"107","severity":1,"message":"108","line":71,"column":41,"nodeType":"105","endLine":73,"endColumn":42},{"ruleId":"98","severity":1,"message":"102","line":2,"column":49,"nodeType":"100","messageId":"101","endLine":2,"endColumn":56},{"ruleId":"98","severity":1,"message":"106","line":16,"column":19,"nodeType":"100","messageId":"101","endLine":16,"endColumn":23},{"ruleId":"107","severity":1,"message":"108","line":61,"column":41,"nodeType":"105","endLine":63,"endColumn":42},{"ruleId":"98","severity":1,"message":"109","line":2,"column":18,"nodeType":"100","messageId":"101","endLine":2,"endColumn":27},{"ruleId":"98","severity":1,"message":"110","line":7,"column":10,"nodeType":"100","messageId":"101","endLine":7,"endColumn":25},{"ruleId":"98","severity":1,"message":"111","line":8,"column":10,"nodeType":"100","messageId":"101","endLine":8,"endColumn":16},{"ruleId":"112","severity":1,"message":"113","line":18,"column":24,"nodeType":"114","messageId":"115","endLine":18,"endColumn":26},{"ruleId":"103","severity":1,"message":"104","line":27,"column":29,"nodeType":"105","endLine":27,"endColumn":52},{"ruleId":"107","severity":1,"message":"116","line":49,"column":41,"nodeType":"105","endLine":49,"endColumn":77},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'Notification' is defined but never used.","Identifier","unusedVar","'Section' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'user' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Container' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faList' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]